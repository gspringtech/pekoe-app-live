<?xml version="1.0" encoding="UTF-8"?>
<!-- (: Copyright 2012 Geordie Springfield Pty Ltd Australia :) -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" exclude-result-prefixes="xs xd" version="2.0">
    <!--  This file is a generator for the final part of the Merge process. Each template will have an XQuery generated using this file. 
    	  The CONTEXT of this stylesheet is the ph-links file (meta-data for each Template).
    	  e.g. 
  <ph-links for="school-booking" template-kind="docx">
    <link ph-name="visit-date" field-path="/school-booking/day" output-name="visit-date"/>
    <link ph-name="schoolname" field-path="/school-booking/school/name" output-name=""/>
    <link ph-name="teacher" field-path="/school-booking/school/teacher" output-name=""/>
    <link ph-name="school-year" field-path="/school-booking/school/year" output-name=""/>
    	  
    	  IMPORTANT: this generator should be as minimal as possible - all work should be done in the associated modules.
    	  Otherwise, code changes will require regenerating this for every template. 
     -->
    <xsl:output method="xml" cdata-section-elements="" omit-xml-declaration="yes"/>
    <xsl:param name="path-to-schema" required="yes"/> <!-- e.g /db/pekoe/files/education/schemas/school-booking.xml -->
    <xsl:param name="template-file" required="yes"/>  <!-- e.g /db/pekoe/templates/Education/Concession-ticket-2a.docx-->
    <xsl:variable name="schema-type" select="/ph-links/string(@for)"/> <!-- e.g. "schools", "school-booking", "properties", "schema" -->
    <xsl:variable name="doctype" select="/ph-links/string(@template-kind)"/> <!--  "docx", "html" or "txt" -->
    <xsl:variable name="doctype-module" select="concat('merge-',$doctype)"/> <!-- pekoe-docx - to distinguish it from other things.-->
    <xsl:template match="/">
(: 
   This is a Pekoe Merge XQuery. 
   
   This XQuery is generated by Pekoe using /pekoe/templates/generate-links-xql.xsl from the ph-links file (in template-meta) for each Template.
   The Merge has three parts:
    - get the Field Values using the Field Paths and process using the Output functions (from the schema) using local:collect-values()
    - replace the Field markers in the Template with the appropriate Field Values. (using the appropriate "merge()" according to $doctype)
    - emit the result in appropriate form (might be zipped into a docx or delivered as HTML into a new Tab).
   
       pekoe-docx:doc-transform($input as node(), $links) 
   to produce the final output. This is where the merge happens.

 :)
         
import module namespace pekoe="http://www.gspring.com.au/pekoe" at "xmldb:exist:///db/pekoe-system/common.xqm";
<!-- The Schema module containing the output functions -->
import module namespace <xsl:value-of select="$schema-type"/>="http://www.gspring.com.au/schema-module/<xsl:value-of select="$schema-type"/>" 
        at "xmldb:exist://<xsl:value-of select="$path-to-schema"/>/<xsl:value-of select="$schema-type"/>.xqm";
<!-- the doctype module -->
import module namespace <xsl:value-of select="$doctype-module"/>="http://www.gspring.com.au/pekoe/merge/<xsl:value-of select="$doctype"/>" 
        at "http://localhost:8080/exist/pekoe/templates/<xsl:value-of select="$doctype-module"/>.xqm";
<!-- the site-specific module -->
import module namespace site="http://gspring.com.au/pekoe/site-tools" 
        at "xmldb:exist:///db/pekoe/config/site-tools.xqm";
        
    
declare copy-namespaces preserve, inherit; 
    
    (: Links data generator for the <xsl:value-of select="$schema-type"/> schema :)
declare function local:collect-values($job) { 
    <xsl:apply-templates/>
};
    
(: MAIN QUERY :)
    
    let $job-file := request:get-parameter("job", "")  
    let $job := doc($job-file) <!-- would be useful to put some error checking here -->
    let $intermediate := local:collect-values($job)
    (: let $debug := xmldb:store("/db/temp","intermediate.xml", $intermediate) :)
    let $merged-content := <xsl:value-of select="$doctype-module"/>:merge($intermediate, "<xsl:value-of select="$template-file"/>")
    (: your site file must determine how to proceed - perhaps based on some parameter. :)
    return site:delivery($job, "<xsl:value-of select="$template-file"/>", $merged-content)
        
<!--    return <xsl:value-of select="$doctype-module" />:merge($intermediate, "<xsl:value-of select="replace($template-file, '/db/pekoe/templates(.*)\.docx$','/db/pekoe/config/template-content$1.xml')"  />", $job-id)     -->
    <!-- See discussion in Chasewater about OUTPUT SCENARIOS -->
    </xsl:template>
    
    <!--  GENERATE this:
        <link ph-name="School-address" field-path="/school-booking/school" output-name="address-on-one-line">
            { let $context := $job/school-booking/school
              return school-booking:address-on-one-line($context)    
            }
        </link> 
        OR 
        <link ph-name="Inv-num" field-path="/school-booking/invoice/number" output-name="">
            { $job/school-booking/invoice/number/string(.) }
        </link>
        -->
    <xsl:template match="ph-links">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:attribute name="template-path" select="$template-file"/>
            <xsl:apply-templates select="node()"/>
        </xsl:copy>
    </xsl:template>
    <xsl:template match="link">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*"/>
            {<xsl:choose>
                <xsl:when test="./@field-path eq ''">()</xsl:when>
                <xsl:when test="./@output-name eq ''"> <!-- this is a value result.  -->
                    $job<xsl:value-of select="./@field-path"/>
                </xsl:when>
                <xsl:otherwise><!-- this is a schema-module function call -->
                    let $context := $job<xsl:value-of select="./@field-path"/>
                    return <xsl:value-of select="$schema-type"/>:<xsl:value-of select="@output-name"/>($context)
                </xsl:otherwise>
            </xsl:choose>}
        </xsl:copy>
    </xsl:template>
    <xsl:template match="node() | @*">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*"/>
        </xsl:copy>
    </xsl:template>
</xsl:stylesheet>