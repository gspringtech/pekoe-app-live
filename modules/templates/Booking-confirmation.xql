
(: 
   This is a Pekoe Merge XQuery. 
   
   This XQuery is generated by Pekoe using /pekoe/templates/generate-links-xql.xsl from the ph-links file (in template-meta) for each Template.
   The Merge has three parts:
    - get the Field Values using the Field Paths and process using the Output functions (from the schema) using local:collect-values()
    - replace the Field markers in the Template with the appropriate Field Values. (using the appropriate "merge()" according to $doctype)
    - emit the result in appropriate form (might be zipped into a docx or delivered as HTML into a new Tab).
   
       pekoe-docx:doc-transform($input as node(), $links) 
   to produce the final output. This is where the merge happens.

 :)
         
import module namespace pekoe="http://www.gspring.com.au/pekoe" at "xmldb:exist:///db/pekoe-system/common.xqm";

import module namespace school-booking="http://www.gspring.com.au/schema-module/school-booking" 
        at "xmldb:exist:///db/pekoe/files/education/schemas/school-booking.xqm";

import module namespace merge-docx="http://www.gspring.com.au/pekoe/merge/docx" 
        at "http://localhost:8080/exist/pekoe/templates/merge-docx.xqm";

import module namespace site="http://gspring.com.au/pekoe/site-tools" 
        at "xmldb:exist:///db/pekoe/config/site-tools.xqm";
        
    
declare copy-namespaces preserve, inherit; 
    
    (: Links data generator for the school-booking schema :)
declare function local:collect-values($job) { 
    <ph-links for="school-booking" template-kind="docx" template-path="/db/pekoe/templates/Education/Booking-confirmation.docx">
    <link ph-name="visit-date" field-path="/school-booking/day" output-name="first-visit-date">
            {
                    let $context := $job/school-booking/day
                    return school-booking:first-visit-date($context)
                }
        </link>
    <link ph-name="start-time" field-path="/school-booking/day" output-name="activity-start">
            {
                    let $context := $job/school-booking/day
                    return school-booking:activity-start($context)
                }
        </link>
    <link ph-name="teacher" field-path="/school-booking/school" output-name="teacher">
            {
                    let $context := $job/school-booking/school
                    return school-booking:teacher($context)
                }
        </link>
    <link ph-name="school" field-path="/school-booking/school" output-name="school-name">
            {
                    let $context := $job/school-booking/school
                    return school-booking:school-name($context)
                }
        </link>
    <link ph-name="teacher-email" field-path="/school-booking/school" output-name="teacher-email">
            {
                    let $context := $job/school-booking/school
                    return school-booking:teacher-email($context)
                }
        </link>
    <link ph-name="teacher-mobile" field-path="/school-booking/school" output-name="teacher-mobile">
            {
                    let $context := $job/school-booking/school
                    return school-booking:teacher-mobile($context)
                }
        </link>
    <link ph-name="trail-event" field-path="/school-booking/day" output-name="trail-event">
            {
                    let $context := $job/school-booking/day
                    return school-booking:trail-event($context)
                }
        </link>
    <link ph-name="year-level" field-path="/school-booking/school" output-name="year-level">
            {
                    let $context := $job/school-booking/school
                    return school-booking:year-level($context)
                }
        </link>
    <link ph-name="students" field-path="/school-booking/day/students" output-name="">
            { 
                    $job/school-booking/day/students}
        </link>
    <link ph-name="eo" field-path="/school-booking/day" output-name="eo-required">
            {
                    let $context := $job/school-booking/day
                    return school-booking:eo-required($context)
                }
        </link>
    <link ph-name="meeting-place" field-path="/school-booking/day" output-name="activity-location">
            {
                    let $context := $job/school-booking/day
                    return school-booking:activity-location($context)
                }
        </link>
    <link ph-name="add-teacher-to-list" field-path="/school-booking/school" output-name="add-to-list">
            {
                    let $context := $job/school-booking/school
                    return school-booking:add-to-list($context)
                }
        </link>
</ph-links>
};
    
(: MAIN QUERY :)
    
    let $job-file := request:get-parameter("job", "")  
    let $job := doc($job-file) 
    let $intermediate := local:collect-values($job)
    (: let $debug := xmldb:store("/db/temp","intermediate.xml", $intermediate) :)
    let $merged-content := merge-docx:merge($intermediate, "/db/pekoe/templates/Education/Booking-confirmation.docx")
    (: your site file must determine how to proceed - perhaps based on some parameter. :)
    return site:delivery($job, "/db/pekoe/templates/Education/Booking-confirmation.docx", $merged-content)
        

    
    